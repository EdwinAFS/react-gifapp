{"version":3,"sources":["components/CategoryAdd.js","helpers/getGifs.js","components/GifItem.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","reportWebVitals.js","index.js"],"names":["CategoryAdd","setCategories","useState","categoryInput","setCategoryInput","onSubmit","e","preventDefault","trim","length","categories","type","value","onChange","target","getGifs","category","a","url","fetch","response","json","data","gifList","map","id","title","images","fixed_height","GifItem","className","src","alt","GifGrid","loading","state","setState","useEffect","then","gifs","useFetchGifs","gif","GifExpertApp","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"mMAGaA,EAAc,SAAC,GAAqB,IAApBC,EAAmB,EAAnBA,cAAmB,EAELC,mBAAS,IAFJ,mBAExCC,EAFwC,KAEzBC,EAFyB,KAkB/C,OACC,sBAAMC,SAXc,SAAEC,GACtBA,EAAEC,iBAEEJ,EAAcK,OAAOC,OAAS,GAIlCR,GAAe,SAAAS,GAAU,OAAKP,GAAL,mBAAuBO,QAIhD,SACC,uBACCC,KAAK,OACLC,MAAOT,EACPU,SAnB0B,SAACP,GAC7BF,EAAiBE,EAAEQ,OAAOF,a,+BCNfG,EAAO,uCAAG,WAAQC,GAAR,uBAAAC,EAAA,6DAChBC,EADgB,iDACgCF,EADhC,6BAFP,oCAEO,SAGCG,MAAMD,GAHP,cAGhBE,EAHgB,gBAICA,EAASC,OAJV,uBAIdC,EAJc,EAIdA,KAEFC,EAAUD,EAAKE,KAAI,YACxB,MAAO,CACNC,GAF6E,EAAnDA,GAG1BC,MAH6E,EAA/CA,MAI9BR,IAJ6E,EAAxCS,OAAUC,aAAgBV,QAN3C,kBAcfK,GAde,4CAAH,sDCAPM,EAAU,SAAC,GAAoB,IAAlBH,EAAiB,EAAjBA,MAAOR,EAAU,EAAVA,IAEhC,OACC,sBAAKY,UAAU,6CAAf,UACC,qBAAKA,UAAU,OAAf,SACC,qBAAKC,IAAKb,EAAKc,IAAKN,MAErB,qBAAKI,UAAU,SAAf,SACC,4BAAIJ,UCNKO,EAAU,SAAC,GAAkB,IAAhBjB,EAAe,EAAfA,SAAe,ECDb,SAACA,GAAc,IAAD,EACfd,mBAAS,CAClCoB,KAAM,GACNY,SAAS,IAH+B,mBAClCC,EADkC,KAC3BC,EAD2B,KAiBzC,OAXAC,qBACC,kBACCtB,EAAQC,GAAUsB,MAAK,SAACC,GACvBH,EAAS,CACRd,KAAMiB,EACNL,SAAS,SAGZ,CAAClB,IAGKmB,EDdyBK,CAAcxB,GAAhCuB,EAF0B,EAEhCjB,KAAYY,EAFoB,EAEpBA,QAEpB,OACC,eAAC,WAAD,WACC,6BAAKlB,IAEHkB,GAAW,mBAAGJ,UAAU,8CAAb,yBACb,qBAAKA,UAAU,OAAf,SAEES,EAAKf,KAAI,SAAAiB,GACR,OACC,cAAC,EAAD,eAA0BA,GAAZA,EAAIhB,aEbZiB,EAAe,WAAO,IAAD,EAEGxC,mBAAS,CAAC,cAFb,mBAE1BQ,EAF0B,KAEdT,EAFc,KAIjC,OACC,eAAC,WAAD,WACC,8CACA,uBACA,cAAC,EAAD,CAAaA,cAAeA,IAC5B,6BAEES,EAAWc,KAAK,SAAAR,GAAQ,OACvB,cAAC,EAAD,CAECA,SAAaA,GADLA,YCLA2B,G,MAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBP,MAAK,YAAkD,IAA/CQ,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,QCDdO,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,SAM1BX,M","file":"static/js/main.39519f4b.chunk.js","sourcesContent":["import React, { useState } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nexport const CategoryAdd = ({setCategories}) => {\r\n\r\n\tconst [categoryInput, setCategoryInput] = useState('');\r\n\r\n\tconst handleChangeCategory = (e) => {\r\n\t\tsetCategoryInput(e.target.value);\r\n\t}\r\n\r\n\tconst handleSubmit = ( e ) => {\r\n\t\te.preventDefault();\r\n\r\n\t\tif( categoryInput.trim().length < 2){\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tsetCategories( categories => [categoryInput, ...categories] );\r\n\t}\r\n\r\n\treturn (\r\n\t\t<form onSubmit={handleSubmit}>\r\n\t\t\t<input\r\n\t\t\t\ttype=\"text\"\r\n\t\t\t\tvalue={categoryInput}\r\n\t\t\t\tonChange={handleChangeCategory}\r\n\t\t\t/>\r\n\t\t</form>\r\n\t);\r\n};\r\n\r\nCategoryAdd.propTypes = {\r\n\tsetCategories: PropTypes.func.isRequired\r\n}","const API_KEY = 'SbYe5IokTC6i5j3Bml5Ylx4HUVNXZyBX';\r\n\r\nexport const getGifs = async ( category ) => {\r\n\tconst url = `https://api.giphy.com/v1/gifs/search?q=${category}&limit=10&api_key=${API_KEY}`;\r\n\r\n\tconst response = await fetch(url);\r\n\tconst { data } = await response.json();\r\n\r\n\tconst gifList = data.map(({ id, title, images: { fixed_height: { url } } }) => {\r\n\t\treturn {\r\n\t\t\tid,\r\n\t\t\ttitle,\r\n\t\t\turl\r\n\t\t}\r\n\t});\r\n\r\n\treturn gifList;\r\n}","import React from 'react';\r\n\r\nexport const GifItem = ({ title, url }) => {\r\n\r\n\treturn (\r\n\t\t<div className='card animate__animated animate__fadeInDown'>\r\n\t\t\t<div className='body'>\r\n\t\t\t\t<img src={url} alt={title}/>\r\n\t\t\t</div>\r\n\t\t\t<div className='footer'>\r\n\t\t\t\t<p>{title}</p>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t);\r\n\r\n}","import React, { Fragment } from 'react';\r\nimport { useFetchGifs } from '../hooks/useFetchGifs';\r\nimport { GifItem } from './GifItem'; \r\n\r\nexport const GifGrid = ({ category }) => {\r\n\r\n\tconst { data: gifs, loading } = useFetchGifs( category );\r\n\r\n\treturn (\r\n\t\t<Fragment>\r\n\t\t\t<h3>{category}</h3>\r\n\r\n\t\t\t{ loading && <p className='animate__animated animate__lightSpeedInLeft'>Cargando...</p>}\r\n\t\t\t<div className='grid'>\r\n\t\t\t\t{\r\n\t\t\t\t\tgifs.map(gif => {\r\n\t\t\t\t\t\treturn (\r\n\t\t\t\t\t\t\t<GifItem key={gif.id} {...gif} />\r\n\t\t\t\t\t\t);\r\n\t\t\t\t\t})\r\n\t\t\t\t}\r\n\t\t\t</div>\r\n\r\n\t\t</Fragment>\r\n\t);\r\n\r\n}","import { useEffect, useState } from \"react\";\r\nimport { getGifs } from \"../helpers/getGifs\";\r\n\r\nexport const useFetchGifs = (category) => {\r\n\tconst [state, setState] = useState({\r\n\t\tdata: [],\r\n\t\tloading: true,\r\n\t});\r\n\r\n\tuseEffect(\r\n\t\t() =>\r\n\t\t\tgetGifs(category).then((gifs) => {\r\n\t\t\t\tsetState({\r\n\t\t\t\t\tdata: gifs,\r\n\t\t\t\t\tloading: false,\r\n\t\t\t\t});\r\n\t\t\t}),\r\n\t\t[category]\r\n\t);\r\n\r\n\treturn state;\r\n};\r\n","import React, { Fragment, useState } from \"react\";\r\nimport { CategoryAdd } from \"./components/CategoryAdd\";\r\nimport { GifGrid } from \"./components/GifGrid\";\r\n\r\nexport const GifExpertApp = () => {\r\n\t\r\n\tconst [categories, setCategories] = useState([\"One Punch\"]);\r\n\r\n\treturn (\r\n\t\t<Fragment>\r\n\t\t\t<h2> GifExperApp</h2>\r\n\t\t\t<hr />\r\n\t\t\t<CategoryAdd setCategories={setCategories}/>\r\n\t\t\t<ol>\r\n\t\t\t\t{\r\n\t\t\t\t\tcategories.map( category => (\r\n\t\t\t\t\t\t<GifGrid \r\n\t\t\t\t\t\t\tkey = { category }\r\n\t\t\t\t\t\t\tcategory = { category }\r\n\t\t\t\t\t\t/>\r\n\t\t\t\t\t))\r\n\t\t\t\t}\r\n\t\t\t</ol>\r\n\t\t</Fragment>\r\n\t);\r\n};\r\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { GifExpertApp } from './GifExpertApp';\nimport './index.css';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <GifExpertApp />,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}